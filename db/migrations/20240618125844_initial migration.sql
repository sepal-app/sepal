-- migrate:up

create table public."user" (
  id int generated by default as identity primary key,
  avatar_public_id text,
  email text not null unique,
  password text not null unique,
  email_verified_at timestamptz default null
);

create index user_id_idx on public."user" (id);

create table public.organization (
  id int generated by default as identity primary key,
  abbreviation text,
  name text not null,
  short_name text
);

create index organization_id_idx on public.organization (id);

create type organization_role as enum (
  'owner',
  'admin',
  'read',
  'write',
  'guest'
);

create table public.organization_user (
  organization_id int constraint organization_user_organization_id_fkey references organization (id) not null,
  user_id int constraint organization_user_user_id_fkey references public."user" (id) not null,
  role organization_role not null
);

alter table public.organization_user
add constraint organization_user_organization_id_user_id_unique unique (organization_id, user_id);

create type public.taxon_rank_enum as enum (
  'class',
  'family',
  'form',
  'genus',
  'kingdom',
  'order',
  'phylum',
  'prole',
  'section',
  'series',
  'species',
  'subclass',
  'subfamily',
  'subkingdom',
  'subform',
  'subgenus',
  'subsection',
  'subseries',
  'subspecies',
  'subtribe',
  'subvariety',
  'superorder',
  'tribe',
  'variety'
);

create table public.taxon (
  id int generated by default as identity primary key,
  name text not null,
  author text,
  organization_id int constraint taxon_organization_id_fkey references organization (id),
  parent_id int constraint taxon_parent_id_fkey references taxon (id),
  rank public.taxon_rank_enum not null,
  wfo_taxon_id_2023_12 text
);

create index taxon_id_idx on public.taxon (id);

create index taxon_organization_id_idx on public.taxon (organization_id);

create index taxon_name_idx on public.taxon (name);

create index taxon_name_trgm_idx on taxon using gist (name gist_trgm_ops);

create index taxon_parent_id_idx on public.taxon (parent_id);

create index taxon_wfo_taxon_id_2023_12_idx on public.taxon (wfo_taxon_id_2023_12);

create table public.location (
  id int generated by default as identity primary key,
  code text not null,
  name text not null default '',
  description text not null default '',
  organization_id int constraint location_organization_id_fkey references organization (id) not null
);

alter table public.location
add constraint location_code_organization_id_key unique (code, organization_id);

create index location_id_idx on public.location (id);

create index location_organization_id_idx on public.location (organization_id);

create table public.accession (
  id int generated by default as identity primary key,
  code text not null,
  taxon_id int constraint accession_taxon_id_fkey references taxon (id) not null,
  organization_id int constraint accession_organization_id_fkey references organization (id) not null
);

alter table public.accession
add constraint accession_code_organization_id_key unique (code, organization_id);

create index accession_id_idx on public.accession (id);

create index accession_organization_id_idx on public.accession (organization_id);

create table public.material (
  id int generated by default as identity primary key,
  code text not null,
  accession_id int constraint material_accession_id_fkey references accession (id) not null,
  location_id int constraint material_location_id_fkey references location (id) not null,
  organization_id int constraint material_organization_id_fkey references organization (id) not null
);

alter table public.material
add constraint material_code_accession_id_organization_id_key unique (code, accession_id, organization_id);

create index material_id_idx on public.material (id);

create index material_organization_id_idx on public.material (organization_id);

create table public.media (
  id int not null generated by default as identity primary key,
  s3_bucket text not null,
  s3_key text not null,
  title text null,
  description text null,
  size_in_bytes int not null,
  media_type text not null,
  organization_id int constraint media_organization_id_fkey references organization (id) not null,
  created_at timestamptz not null default now(),
  created_by int constraint media_created_by_fkey references public."user" (id) not null,
  constraint media_organization_id_s3_bucket_s3_key_unq unique (organization_id, s3_bucket, s3_key)
);

create index media_id_idx on public.media (id);

create index media_organization_id_idx on public.media (organization_id);

create table public.activity (
  id int not null generated by default as identity,
  data jsonb not null,
  type text not null,
  organization_id int constraint activity_organization_id_fkey references organization (id) not null,
  created_by int constraint activity_created_by_fkey references public."user" (id) not null,
  created_at timestamptz default timezone('utc'::text, current_timestamp) not null
);

create index activity_id_idx on public.activity (id);

create index activity_organization_id_idx on public.activity (organization_id);

drop schema if exists wfo_plantlist_2023_12 cascade;

create schema wfo_plantlist_2023_12;

set schema 'wfo_plantlist_2023_12';

create table wfo_plantlist_2023_12.name (
    id text,
    alternative_id text,
    basionym_id text,
    scientific_name text,
    authorship text,
    rank text,
    uninomial text,
    genus text,
    infrageneric_epithet text,
    specific_epithet text,
    infraspecific_epithet text,
    code text,
    reference_id text,
    published_in_year text,
    link text
);

create index name_id_idx on wfo_plantlist_2023_12.name (id);

create index name_scientific_name_idx on wfo_plantlist_2023_12.name (scientific_name);

create index name_scientific_name_tsvector_idx on wfo_plantlist_2023_12.name using gin (to_tsvector('english', scientific_name));

create table wfo_plantlist_2023_12.reference (
  id text,
  citation text,
  link text,
  doi text,
  remarks text
);

create index reference_id_idx on wfo_plantlist_2023_12.reference (id);

create table wfo_plantlist_2023_12.synonym (
    id text,
    taxon_id text,
    name_id text,
    according_to_id text,
    reference_id text,
    link text
);

create index synonym_id_idx on wfo_plantlist_2023_12.synonym (id);

create table wfo_plantlist_2023_12.taxon (
    id text,
    -- TODO: Add a foreign key relation between taxon.name_id and name.id?
    name_id text,
    parent_id text,
    according_to_id text,
    scrutinizer text,
    scrutinizer_id text,
    -- TODO:  Parse and store as timestamptz?
    scrutinizer_date text,
    reference_id text,
    link text
);

create index taxon_id_idx on wfo_plantlist_2023_12.taxon (id);

create index taxon_name_id_idx on wfo_plantlist_2023_12.taxon(name_id);

create index taxon_parent_id_idx on wfo_plantlist_2023_12.taxon(parent_id);


-- migrate:down
